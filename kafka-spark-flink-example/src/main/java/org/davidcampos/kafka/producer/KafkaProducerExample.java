package org.davidcampos.kafka.producer;

import kafka.admin.AdminUtils;
import kafka.admin.RackAwareMode;
import kafka.utils.ZKStringSerializer$;
import kafka.utils.ZkUtils;
import org.I0Itec.zkclient.ZkClient;
import org.I0Itec.zkclient.ZkConnection;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.davidcampos.kafka.commons.Commons;

import java.util.Properties;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

public class KafkaProducerExample {
    private static final Logger logger = LogManager.getLogger(KafkaProducerExample.class);

    public static void main(final String... args) {
        // Create topic
        createTopic();

        String[] words = new String[]{"1,63.0,0,1,1,4,1,228.69,36.6,1,1",
                "1,42.0,0,1,1,4,0,105.92,32.5,0,1",
                "0,61.0,0,0,1,4,1,171.23,34.4,1,1",
                "1,41.0,1,0,1,3,0,174.12,24.0,0,1" ,
                "1,85.0,0,0,1,4,1,186.21,29.0,1,1",
                "1,55.0,1,1,1,4,0,70.09,27.4,0,1" ,
                "0,82.0,0,0,0,4,1,94.39,22.8,0,1",
                "0,17.0,1,0,1,4,0,80.43,29.7,0,1",
                "1,31.0,0,1,1,2,0,120.46,36.8,1,1" ,
                "0,55.0,0,0,1,4,1,104.51,27.3,1,1" ,
                "1,63.0,0,1,1,4,1,228.69,36.6,1,1",
               " 1,42.0,0,1,1,4,0,105.92,32.5,0,1",
                "0,61.0,0,0,1,4,1,171.23,34.4,1,1",
                "1,41.0,1,0,1,3,0,174.12,24.0,0,1",
                "1,85.0,0,0,1,4,1,186.21,29.0,1,1",
                "1,55.0,1,1,1,4,0,70.09,27.4,0,1",
                "0,82.0,0,0,0,4,1,94.39,22.8,0,1",
                "0,17.0,1,0,1,4,0,80.43,29.7,0,1",
                "1,31.0,0,1,1,2,0,120.46,36.8,1,1",
                "0,55.0,0,0,1,4,1,104.51,27.3,1,1",
                "0,39.0,0,1,1,4,1,214.09,28.2,0,1",
                "1,26.0,1,0,1,3,0,167.41,30.9,0,1",
                "0,19.0,0,1,1,4,1,191.61,37.5,1,1",
                "0,78.0,1,0,1,4,1,221.29,25.8,1,1",
                "1,45.0,0,0,0,4,1,89.22,37.8,0,1",
                "0,50.0,0,0,1,2,0,193.94,22.4,1,1",
                "0,53.0,1,0,1,3,1,233.29,48.9,0,1",
                "0,71.0,0,0,1,3,1,228.7,26.6,0,1",
                "1,64.0,0,0,1,4,1,102.87,27.2,1,1",
                "1,50.0,0,0,1,3,0,104.12,23.5,0,1",
                "0,31.0,0,0,1,4,0,100.98,28.2,1,1",
                "0,75.0,0,1,1,3,1,195.23,28.3,1,1",
                "1,67.0,1,0,1,4,1,212.08,44.2,1,1",
                "1,40.0,1,0,1,3,1,196.92,22.2,0,1",
                "1,31.0,0,1,1,3,1,252.72,30.5,1,1",
                "1,75.0,0,0,0,2,1,84.2,29.7,0,1",
                "1,71.0,1,1,0,4,0,84.03,26.5,1,1",
                "1,23.0,0,0,1,4,0,219.72,33.7,1,1",
                "0,33.0,1,0,1,4,0,74.63,23.1,1,1",
                "0,65.0,0,0,1,4,1,60.91,29.9,0,1",
                "1,83.0,0,0,1,4,0,78.03,23.9,1,1",
                "1,79.0,0,0,1,4,1,71.22,28.5,0,1",
                "1,62.0,0,1,1,4,1,144.9,26.4,1,1",
                "0,83.0,1,0,1,2,1,213.03,20.2,1,1",
                "1,26.0,1,0,1,4,0,243.58,33.6,0,1",
                "0,58.0,0,0,1,4,1,107.26,38.6,1,1",
                "0,42.0,0,0,1,3,1,99.33,33.7,0,1",
                "1,34.0,1,0,1,4,0,58.09,39.2,1,1",
                "0,41.0,0,1,1,4,0,127.29,27.7,0,1",
                "1,27.0,1,0,1,3,1,124.13,31.4,0,1",
                "0,85.0,0,1,1,4,0,196.71,36.5,1,1",
                "1,68.0,0,0,1,4,0,59.32,33.2,0,1",
                "0,52.0,1,0,1,3,1,194.99,32.8,0,1",
                "1,33.0,1,0,1,2,1,180.93,27.7,0,1",
                "1,49.0,0,0,1,4,1,185.17,40.4,1,1",
                "1,13.0,1,0,1,4,0,74.9,22.2,0,1",
                "1,60.0,1,0,1,3,0,61.94,25.3,1,1",
                "1,62.0,0,0,1,4,0,93.72,30.2,1,1",
                "1,17.0,1,0,0,4,1,113.01,24.0,0,1",
                "1,50.0,0,0,1,4,1,221.58,47.5,0,1",
                "1,24.0,0,0,1,4,1,86.23,30.0,1,1",
                "1,11.0,1,0,1,3,0,72.67,28.9,0,1",
                "1,47.0,1,0,1,4,0,179.12,28.1,1,1",
                "1,70.0,1,0,1,2,0,116.55,31.1,1,1",
                "1,79.0,0,0,1,4,0,228.56,27.4,0,1",
                "1,38.0,0,0,1,4,0,96.59,26.4,0,1",
                "1,33.0,0,1,1,3,0,66.72,21.7,1,1",
                "1,59.0,1,0,1,4,1,240.09,27.0,0,1",
                "1,40.0,0,0,1,4,1,110.85,24.1,1,1",
                "1,36.0,0,0,0,4,0,88.92,22.9,0,1",
                "1,77.0,1,0,0,3,1,79.79,29.7,0,1",
                "1,19.0,0,0,1,4,0,96.97,29.1,1,1",
                "0,58.0,0,1,1,4,0,111.81,27.3,1,1",
                "1,17.0,0,1,1,4,0,59.35,32.3,1,1",
                "0,54.0,0,0,1,4,1,86.94,41.1,1,1",
                "1,59.0,0,1,1,4,1,226.98,29.8,0,1",
                "0,19.0,0,0,1,4,1,72.81,26.3,0,1",
                "0,58.0,0,0,0,3,1,68.02,37.5,0,1",
                "0,65.0,0,0,1,4,0,64.14,29.4,0,1",
                "0,93.0,0,0,1,4,0,235.63,32.3,0,1",
                "0,29.0,0,0,1,3,0,76.34,24.4,1,1",
                "1,51.0,0,1,1,4,0,240.59,31.4,1,1",
                "1,21.0,1,0,1,2,1,78.92,27.7,1,1",
                "1,42.0,0,0,1,2,1,82.81,28.0,0,1",
                "0,56.0,0,0,1,2,0,190.32,31.4,0,1",
                "1,20.0,0,0,1,4,0,231.61,34.6,1,1",
                "0,56.0,1,0,1,4,0,73.18,30.3,1,1",
                "1,46.0,0,0,1,3,0,191.82,40.4,1,1",
                "0,56.0,0,0,1,4,0,93.05,24.2,0,1",
                "1,51.0,0,0,1,2,1,64.17,41.5,0,1",
                "1,72.0,0,1,1,4,0,129.98,22.6,1,1",
                "1,39.0,0,1,1,4,1,68.53,24.2,1,1",
                "1,59.0,0,0,1,4,0,224.1,56.6,0,1",
                "0,65.0,1,1,0,2,0,216.94,30.9,0,1",
                "1,37.0,1,0,1,3,0,76.11,27.3,1,1",
                "1,23.0,0,0,1,4,1,72.96,31.3,1,1",
                "1,65.0,0,0,0,3,1,82.28,24.0,1,1",
                "1,18.0,0,0,1,4,1,105.22,31.0,0,1",
                "0,66.0,0,0,1,4,0,59.86,28.0,1,1",
                "1,25.0,0,0,1,4,0,259.63,31.7,1,1",
                "1,13.0,1,0,1,4,0,249.31,35.8,0,1",
                "1,57.0,0,0,1,2,1,131.41,28.4,0,1",
                "0,75.0,0,0,1,2,1,200.59,29.0,1,1",
                "0,51.0,1,0,1,4,0,190.14,36.5,0,1",
                "0,82.0,1,0,0,4,1,130.54,20.1,0,1",
                "0,61.0,1,0,0,4,0,182.99,36.5,0,1",
                "1,78.0,1,0,1,3,0,206.09,26.7,0,1",
                "0,16.0,0,0,1,2,1,263.32,38.7,0,1",
                "1,59.0,0,0,1,4,1,140.1,29.9,1,1",
                "1,36.0,1,0,1,3,0,194.37,27.0,1,1",
                "1,80.0,0,1,1,2,0,103.68,25.0,0,1",
                "0,16.0,0,0,1,4,0,116.44,23.8,1,1",
                "0,31.0,1,0,1,4,1,70.28,21.8,0,1",
                "1,26.0,1,1,0,3,1,72.17,36.8,0,1",
                "0,28.0,1,0,1,4,1,221.79,30.0,0,1",
                "0,54.0,0,0,1,4,1,151.16,27.5,1,1",
                "0,84.0,0,0,1,4,1,67.29,24.6,0,1",
                "1,51.0,1,0,1,2,0,67.41,32.9,0,1",
                "1,28.0,0,1,1,4,0,239.07,26.1,0,1",
                "1,44.0,0,1,1,4,1,223.83,31.9,1,1",
                "0,77.0,0,0,1,3,1,76.57,34.1,0,1",
                "1,31.0,0,0,1,3,1,77.82,27.5,1,1",
                "0,34.0,0,0,1,3,0,92.98,25.6,0,1",
                "0,43.0,0,1,1,4,0,231.56,36.9,0,1",
                "1,57.0,0,0,1,4,0,102.16,31.4,1,1",
                "1,58.0,0,0,1,4,1,221.89,37.3,1,1",
                "1,34.0,0,0,1,3,1,195.71,34.1,1,1",
                "0,52.0,1,0,1,3,0,74.02,25.0,0,1",
                "1,52.0,1,0,0,4,1,203.87,45.7,0,1",
                "0,76.0,1,0,1,3,1,89.13,34.2,1,1",
                "1,46.0,0,0,1,3,1,133.19,23.6,1,1",
                "0,75.0,1,0,0,2,1,98.02,22.3,1,1",
                "1,76.0,0,0,1,3,0,91.54,31.4,0,1",
                "1,48.0,0,0,1,4,1,97.43,26.4,1,1",
                "0,80.0,1,0,1,3,0,91.02,32.9,1,1",
                "0,48.0,1,0,1,3,0,185.49,37.1,0,1",
                "1,64.0,0,0,1,4,1,64.44,45.0,0,1",
                "1,57.0,1,0,1,3,0,56.11,25.5,1,1",
                "1,44.0,0,0,1,4,1,78.18,30.8,0,1",
                "0,82.0,0,0,1,4,1,111.04,32.0,1,1",
                "1,18.0,0,0,1,4,0,76.13,29.9,1,1",
                "1,50.0,1,1,1,4,1,112.24,37.4,1,1",
                "1,24.0,0,0,1,4,0,137.3,31.7,1,1",
                "0,59.0,0,1,1,3,1,116.69,34.5,1,1",
                "1,34.0,1,1,1,2,1,215.94,27.9,1,1",
                "0,52.0,0,0,1,4,0,86.62,29.5,1,1",
                "0,20.0,0,0,1,4,1,205.77,46.0,1,1",
                "0,42.0,1,0,1,4,1,112.16,42.5,1,1",
                "0,26.0,0,0,1,3,0,118.03,35.5,1,1",
                "1,8.0,1,1,1,4,0,271.74,31.1,1,1",
                "1,14.0,0,0,1,4,0,97.92,26.9,1,1",
                "0,55.0,0,0,1,4,1,200.62,35.8,1,1",
                "1,18.0,1,0,1,4,0,242.52,45.5,1,1",
                "1,61.0,0,0,1,3,1,74.96,26.6,0,1",
                "1,58.0,1,1,1,4,1,175.29,31.5,1,1",
                "0,63.0,0,0,1,3,0,90.0,32.0,0,1",
                "1,51.0,0,0,1,3,0,109.47,30.8,0,1",
                "0,58.0,0,0,1,2,0,87.85,31.1,1,1",
                "1,18.0,0,0,1,4,1,106.74,33.0,1,1",
                "0,48.0,0,0,1,4,0,80.13,23.4,0,1",
                "1,75.0,0,0,0,3,1,90.19,26.9,0,1",
                "1,14.0,0,0,1,4,1,83.24,26.3,0,1",
                "1,13.0,0,0,1,2,0,103.43,27.3,1,1",
                "0,88.0,0,0,1,4,1,208.65,30.7,0,1",
                "1,47.0,0,0,1,4,1,74.11,20.5,0,1",
                "0,41.0,0,0,1,3,1,95.84,21.5,0,1",
                "1,48.0,0,1,0,4,1,205.33,31.0,1,1",
                "1,41.0,0,0,1,3,1,116.1,27.1,0,1",
                "0,47.0,1,1,1,4,1,210.4,40.0,1,1",
                "0,65.0,0,1,1,2,0,219.73,28.6,0,1",
                "1,17.0,1,1,1,4,1,250.89,28.1,1,1",
                "1,21.0,0,0,1,4,0,72.73,28.4,0,1",
                "1,17.0,0,0,1,2,0,205.35,42.2,1,1",
                "1,42.0,0,0,0,2,1,70.3,25.8,1,1",
                "1,57.0,0,0,0,4,0,104.86,31.9,1,1",
                "1,50.0,0,0,1,4,0,184.4,27.5,0,1",
                "1,64.0,0,0,1,3,1,97.76,29.6,1,1",
                "0,80.0,1,0,0,4,1,66.03,35.4,0,1",
                "1,23.0,0,0,1,3,0,81.95,16.9,0,1"
               };
        Random ran = new Random(System.currentTimeMillis());

        final Producer<String, String> producer = createProducer();
        int EXAMPLE_PRODUCER_INTERVAL = System.getenv("EXAMPLE_PRODUCER_INTERVAL") != null ?
                Integer.parseInt(System.getenv("EXAMPLE_PRODUCER_INTERVAL")) : 100;

        try {
            while (true) {
                String word = words[ran.nextInt(words.length)];
                String uuid = UUID.randomUUID().toString();

                ProducerRecord<String, String> record = new ProducerRecord<>(Commons.EXAMPLE_KAFKA_TOPIC, uuid, word);
                RecordMetadata metadata = producer.send(record).get();

                logger.info("Sent ({}, {}) to topic {} @ {}.", uuid, word, Commons.EXAMPLE_KAFKA_TOPIC, metadata.timestamp());

                Thread.sleep(EXAMPLE_PRODUCER_INTERVAL);
            }
        } catch (InterruptedException | ExecutionException e) {
            logger.error("An error occurred.", e);
        } finally {
            producer.flush();
            producer.close();
        }
    }

    private static Producer<String, String> createProducer() {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, Commons.EXAMPLE_KAFKA_SERVER);
        props.put(ProducerConfig.CLIENT_ID_CONFIG, "KafkaProducerExample");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        return new KafkaProducer<>(props);
    }

    private static void createTopic() {
        int sessionTimeoutMs = 10 * 1000;
        int connectionTimeoutMs = 8 * 1000;

        ZkClient zkClient = new ZkClient(
                Commons.EXAMPLE_ZOOKEEPER_SERVER,
                sessionTimeoutMs,
                connectionTimeoutMs,
                ZKStringSerializer$.MODULE$);

        boolean isSecureKafkaCluster = false;
        ZkUtils zkUtils = new ZkUtils(zkClient, new ZkConnection(Commons.EXAMPLE_ZOOKEEPER_SERVER), isSecureKafkaCluster);

        int partitions = 1;
        int replication = 1;

        // Add topic configuration here
        Properties topicConfig = new Properties();
        if (!AdminUtils.topicExists(zkUtils, Commons.EXAMPLE_KAFKA_TOPIC)) {
            AdminUtils.createTopic(zkUtils, Commons.EXAMPLE_KAFKA_TOPIC, partitions, replication, topicConfig, RackAwareMode.Safe$.MODULE$);
            logger.info("Topic {} created.", Commons.EXAMPLE_KAFKA_TOPIC);
        } else {
            logger.info("Topic {} already exists.", Commons.EXAMPLE_KAFKA_TOPIC);
        }

        zkClient.close();
    }
}